import pandas as pd

# Read Data

from pyodide.http import pyfetch

async def download(url, filename):
    response = await pyfetch(url)
    if response.status == 200:
        with open(filename, "wb") as f:
            f.write(await response.bytes())

file_path = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/LargeData/m1_survey_data.csv"

await download(file_path, "m1_survey_data.csv")
file_name="m1_survey_data.csv"

df = pd.read_csv(file_name)

# Finding duplicates

num_duplicates = df.duplicated().sum()
print(f"Number of duplicate rows in the dataset: {num_duplicates}")

# Removing duplicates

df_cleaned = df.drop_duplicates()

num_duplicates_after = df.duplicated().sum()
print(f"Number of duplicate rows in the dataset after dropping duplicates: {num_duplicates_after}")

# Finding Missing values

missing_values = df.isnull().sum()
print("Missing values in each column:")
print(missing_values)

most_frequent_workloc = df['WorkLoc'].value_counts().idxmax()
print(f"The most frequent value in the 'WorkLoc' column is: {most_frequent_workloc}")

# Imputing missing values

workloc_counts = df['WorkLoc'].value_counts()
print("Value counts for the 'WorkLoc' column:")
print(workloc_counts)

most_frequent_workloc = df['WorkLoc'].value_counts().idxmax()
print(f"The most frequent value in the 'WorkLoc' column is: {most_frequent_workloc}")

df['WorkLoc'].fillna(most_frequent_workloc, inplace=True)
print("Missing values in the 'WorkLoc' column have been replaced with the most frequent value.")

missing_workloc_after_imputation = df['WorkLoc'].isnull().sum()
print(f"Number of missing values in the 'WorkLoc' column after imputation: {missing_workloc_after_imputation}")

# Normalizing data

compfreq_categories = df['CompFreq'].unique()
print("Categories in the 'CompFreq' column:")
print(compfreq_categories)

def normalize_annual_compensation(row):
    if row['CompFreq'] == 'Yearly':
        return row['CompTotal']
    elif row['CompFreq'] == 'Monthly':
        return row['CompTotal'] * 12
    elif row['CompFreq'] == 'Weekly':
        return row['CompTotal'] * 52
    else:
        return None  # Handle cases where CompFreq might be missing or unrecognized

df['NormalizedAnnualCompensation'] = df.apply(normalize_annual_compensation, axis=1)

df[['CompFreq', 'CompTotal', 'NormalizedAnnualCompensation']].head()
